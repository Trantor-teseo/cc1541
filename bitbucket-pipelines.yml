pipelines:
  default:
    - step:
        name: Create and test source tarball
        script:
          - make -j2 dist-check
        artifacts:
          - cc1541*.tar.gz
    - step:
        name: Build distribution binaries
        trigger: manual
        script:
          - echo "Building distribution binaries."
    - parallel:
          - step:
              name: Build and test Linux glibc
              script:
                - export DEB_BUILD_MAINT_OPTIONS="hardening=+all"
                - export CPPFLAGS="$(dpkg-buildflags --get CPPFLAGS)"
                - export CFLAGS="$(dpkg-buildflags --get CFLAGS)"
                - export CXXFLAGS="$(dpkg-buildflags --get CXXFLAGS)"
                - export LDFLAGS="$(dpkg-buildflags --get LDFLAGS)"
                - make -j2 check CPPFLAGS="$CPPFLAGS" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS"
                - strip -g cc1541
                - mv cc1541 cc1541_lin_glibc_x86
              artifacts:
                - cc1541_lin_glibc_x86
          - step:
              name: Build and test Windows
              image: purplekarrot/mingw-w64-i686
              script:
                - make -j2 cc1541 test_cc1541 CC=i686-w64-mingw32-gcc
                - mv cc1541 cc1541.exe
                - mv test_cc1541 test_cc1541.exe
                - wine ./test_cc1541.exe ./cc1541.exe
              artifacts:
                - cc1541.exe
          - step:
              name: Build MacOS
              image: andrewd/osxcross
              script:
                - make -j2 cc1541 test_cc1541 CC=o64-clang
                - mv cc1541 cc1541_mac
                - mv test_cc1541 test_cc1541_mac
              artifacts:
                - cc1541_mac
                - test_cc1541_mac
    - step:
        name: Create binary package
        image: kramos/alpine-zip
        script:
          - export VERSION="$(grep "#define VERSION" cc1541.c | cut -d\" -f2)"
          - zip -o cc1541_bin-$VERSION.zip cc1541_lin_glibc_x86 cc1541.exe cc1541_mac LICENSE.txt README.md
        artifacts:
          - cc1541_bin*.zip
    - step:
        name: Deploy to Bitbucket downloads
        deployment: production
        trigger: manual
        script:
          - export VERSION="$(grep "#define VERSION" cc1541.c | cut -d\" -f2)"
          - curl -X POST --user "${BB_AUTH_STRING}" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}/downloads" --form files=@cc1541-$VERSION.tar.gz
          - curl -X POST --user "${BB_AUTH_STRING}" "https://api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_OWNER}/${BITBUCKET_REPO_SLUG}/downloads" --form files=@cc1541_bin-$VERSION.zip
